name: üöÄ Deploy to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout del c√≥digo
      - name: üßæ Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configurar Node.js
      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3Ô∏è‚É£ Instalar dependencias y compilar Backend
      - name: üì¶ Install & Build Backend
        run: |
          cd apps/backend
          npm ci
          npm run build

      # 4Ô∏è‚É£ Instalar dependencias y compilar Frontend
      - name: üé® Install & Build Frontend
        env:
          VITE_API_URL: http://18.191.179.122:4000/api
          VITE_API_LOGIN: http://18.191.179.122:4000/api/auth/login
          VITE_API_REGISTER: http://18.191.179.122:4000/api/auth/register
          VITE_API_LOGOUT: http://18.191.179.122:4000/api/auth/logout
          VITE_API_JWT_REFRESH: http://18.191.179.122:4000/api/auth/refresh
          VITE_API_USER: http://18.191.179.122:4000/api/user
          VITE_API_WORKSPACES: http://18.191.179.122:4000/api/workspaces
          VITE_API_BOARDS: http://18.191.179.122:4000/api/boards
          VITE_API_LISTS: http://18.191.179.122:4000/api/lists
        run: |
          cd apps/frontend
          npm ci
          npm run build

      # 5Ô∏è‚É£ Configurar acceso SSH seguro
      - name: üîê Configure SSH
        env:
          SSH_KEY_BASE64: ${{ secrets.EC2_SSH_KEY }}
          SSH_HOST: ${{ secrets.EC2_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY_BASE64" | tr -d '\r' | base64 --decode > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts
          echo "‚úÖ SSH key successfully configured"

      # 6Ô∏è‚É£ Subir archivos al servidor EC2
      - name: üì§ Upload Project to EC2
        env:
          SSH_USER: ${{ secrets.EC2_USERNAME }}
          SSH_HOST: ${{ secrets.EC2_HOST }}
        run: |
          rsync -avz --delete \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude '.github' \
            -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
            ./ $SSH_USER@$SSH_HOST:~/task-manager/

      # 7Ô∏è‚É£ Reiniciar contenedores Docker en el servidor
      - name: üê≥ Restart Docker Compose on EC2
        env:
          SSH_USER: ${{ secrets.EC2_USERNAME }}
          SSH_HOST: ${{ secrets.EC2_HOST }}
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'
            set -e
            cd ~/task-manager
            echo "üßπ Stopping old containers..."
            sudo docker-compose down || true
            echo "üöÄ Starting new containers..."
            sudo docker-compose up -d --build
            echo "‚è≥ Waiting for services to stabilize..."
            sleep 10
            sudo docker ps
          EOF

      # 8Ô∏è‚É£ Limpieza
      - name: üßΩ Cleanup temporary SSH key
        if: always()
        run: rm -f ~/.ssh/deploy_key
